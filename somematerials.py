import logging
from aiogram import Bot, Dispatcher, executor, types
import asyncio

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, CallbackQuery, InputMedia
from aiogram.utils.exceptions import BotBlocked
from random import randint
import aiogram.utils.markdown as fmt

# @dp.callback_query_handler(text="+1.1")
# async def text_plus1(call: types.CallbackQuery, floor=floor):
#     floor = 2
#     buttons = [
#         types.InlineKeyboardButton(text="-1", callback_data="-1.2"),
#         types.InlineKeyboardButton(text="+1", callback_data="+1.2"),
#         types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish2")
#     ]
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     await call.message.edit_text("–≠—Ç–∞–∂ "+ str(floor), reply_markup=keyboard)
#
# @dp.callback_query_handler(text="+1.2")
# async def text_plus1(call: types.CallbackQuery, floor=floor):
#     floor = 3
#     buttons = [
#         types.InlineKeyboardButton(text="-1", callback_data="-1.3"),
#         types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish3")
#     ]
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     await call.message.edit_text("–≠—Ç–∞–∂ "+ str(floor), reply_markup=keyboard)
#

#
# @dp.callback_query_handler(text="-1.1")
# async def text_plus1(call: types.CallbackQuery, floor=floor):
#     floor = 0
#     buttons = [
#         types.InlineKeyboardButton(text="-1", callback_data="-1"),
#         types.InlineKeyboardButton(text="+1", callback_data="+1"),
#         types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish0")
#     ]
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     # await call.message.edit_media()
#     await call.message.edit_text(f"–≠—Ç–∞–∂ + {str(floor)}", reply_markup=keyboard)
#
# @dp.callback_query_handler(text="-1.2")
#
# async def text_plus1(call: types.CallbackQuery, floor=floor):
#     floor = 1
#     buttons = [
#         types.InlineKeyboardButton(text="-1", callback_data="-1.1"),
#         types.InlineKeyboardButton(text="+1", callback_data="+1.1"),
#         types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish1")
#     ]
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     await call.message.edit_text(f"–≠—Ç–∞–∂ + {str(floor)}", reply_markup=keyboard)
#
# @dp.callback_query_handler(text="-1.3")
# async def text_plus1 (call: types.CallbackQuery, floor=floor):
#     floor = 2
#     buttons = [
#         types.InlineKeyboardButton(text="-1", callback_data="-1.2"),
#         types.InlineKeyboardButton(text="+1", callback_data="+1.2"),
#         types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish2")
#     ]
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     await call.message.edit_text("–≠—Ç–∞–∂ "+ str(floor), reply_markup=keyboard)
#




# @dp.callback_query_handler(text="+1")
# async def callbacks_lvl(call: types.CallbackQuery, userLvl=userLvl, callback=None):
#     if userLvl > 0:
#         await callback.message.delete()
#         keyboard = types.InlineKeyboardMarkup(row_width=2)
#         keyboard.add(*buttons)
#         if userLvl < 3:
#             userLvl = + 1
#         await call.message.edit_text(text=("–≠—Ç–∞–∂ " + str(userLvl)), reply_markup=keyboard)
#     else:
#         keyboard = types.InlineKeyboardMarkup(row_width=2)
#         keyboard.add(*buttons)
#         if userLvl < 3:
#             userLvl = + 1
#         await call.message.edit_text(text=("–≠—Ç–∞–∂ " + str(userLvl)), reply_markup=keyboard)
# @dp.callback_query_handler(text="+1")
# async def callbacks_lvl(call: types.CallbackQuery, userLvl=userLvl):
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     if userLvl < 3:
#         userLvl = + 1
#     await call.message.edit_text(text=("–≠—Ç–∞–∂ " + str(userLvl)), reply_markup=keyboard)
#
# @dp.callback_query_handler(text="-1")
# async def callbacks_lvl(call: types.CallbackQuery, userLvl=userLvl):
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     keyboard.add(*buttons)
#     if userLvl > 0:
#         userLvl =- 1


    # await call.message.edit_text(text=("–≠—Ç–∞–∂ " + str(userLvl)), reply_markup=keyboard)


# @dp.callback_query_handler(text="num_finish")
# async def callbacks_lvl(call: types.CallbackQuery):

bot = Bot(token="5854619199:AAFO2U5yfHrOm6_9wBZTfudLf_4dgkGizoM")   # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)    # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)     # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
link = "https://sun1-86.userapi.com/impg/MXEUzx2_M5OB-VpY2A_d4uzPi0tDR37QW06UTg/UQbgMS-cy1U.jpg?size=1278x1080&quality=95&sign=d563a4a8badbe3cc89cce20572f6558a&type=album"
@dp.message_handler(commands="start")
async def start_comms(message: types.Message):
    await message.reply("–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/test1\n/test2\n/test4\n/block\n/answer\n/reply\n/dice\n/inline_url\n/random")

@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Hello, *world*\!", parse_mode="MarkdownV2")

@dp.message_handler(commands="test2")
async def cmd_test2(message: types.Message):
    await message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–Ø–±–ª–æ–∫–∏"), ", –≤–µ—Å 1 –∫–≥."),
            fmt.text("–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:", fmt.hstrikethrough(50), "—Ä—É–±–ª–µ–π"),
            fmt.text("–ù–æ–≤–∞—è —Ü–µ–Ω–∞:", fmt.hbold(25), "—Ä—É–±–ª–µ–π"),
            sep="\n"
        ), parse_mode="HTML"
    )

@dp.message_handler(commands="block")
async def cmd_block(message: types.Message):
    await asyncio.sleep(10.0)  # –ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
    await message.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")

# @dp.message_handler()
# async def any_text_message(message: types.Message):
#     await message.answer(message.text)
#     await message.answer(message.md_text)
#     await message.answer(message.html_text)
#     # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
#     await message.answer(
#         f"<u>–í–∞—à —Ç–µ–∫—Å—Ç</u>:\n\n{message.html_text}", parse_mode="HTML"
#     )

@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True

@dp.message_handler(commands="answer")
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

@dp.message_handler(commands="reply")
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')

@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

# @dp.message_handler(commands="Dice")
# async def cmd_dice(message: types.Message):
#     await message.bot.send_dice(-100123456789, emoji="üé≤")

# @dp.message_handler()
# async def any_text_message2(message: types.Message):
#     await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{fmt.quote_html(message.text)}</b>", parse_mode=types.ParseMode.HTML)
#     # –ê –º–æ–∂–Ω–æ –∏ —Ç–∞–∫:
#     await message.answer(fmt.text("–ü—Ä–∏–≤–µ—Ç,", fmt.hbold(message.text)), parse_mode=types.ParseMode.HTML)

@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)

@dp.message_handler(commands="test4")
async def with_hidden_link(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    buttons = ["–° –ø—é—Ä–µ—à–∫–æ–π", "–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏"]
    keyboard.add(*buttons)
    await message.answer(
        f"{fmt.hide_link(link)}–ü–∞–±–ª–∏–∫ –î–∂–µ—Å—Å–∏ –ü–∏–Ω–∫–º–∞–Ω—Ç –ò–Ω—Ç–µ—Ä–ø—Ä–∞–π–∑–µ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç:\n"
        f"-Say my name\n-Heisenberg\n-You are god damn right", reply_markup=keyboard,
        parse_mode=types.ParseMode.HTML)


@dp.message_handler(text="–° –ø—é—Ä–µ—à–∫–æ–π")
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!"),
    reply_markup = types.ReplyKeyboardRemove()


@dp.message_handler(text="–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!"),
    reply_markup = types.ReplyKeyboardRemove()

@dp.message_handler(commands="inline_url")
async def cmd_inline_url(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="GitHub", url="https://github.com"),
        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ —Ä—è–¥, row_widht = 3
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)

@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)

@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10))),
    # await call.answer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!", show_alert=True)     # –°—Ç—Ä–æ–∫–∞ —á—Ç–æ–±—ã –æ–∫–æ–ª–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—ã–ª–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∞—Å–∏–∫–æ–≤

    @dp.message_handler(commands=["photo"])
    async def photo(message: types.Message):
        file_path = "files/foods/borsch.jpg"
        reply_markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="I want a new photo!", callback_data="update_photo")
        )
        file = InputFile(file_path)

        await bot.send_photo(
            message.chat.id,
            photo=file,
            reply_markup=reply_markup,
            caption="Test caption!",
        )

    @dp.callback_query_handler(text="update_photo")
    async def photo_update(query: CallbackQuery):
        file_path = "files/foods/pelmeni.png"
        reply_markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="Updated button", callback_data="dont_click_me")
        )
        file = InputMedia(media=InputFile(file_path), caption="Updated caption :)")

        await query.message.edit_media(file, reply_markup=reply_markup)




@dp.message_handler(commands="sss")
async def but1(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="push me", callback_data="button_pushed"))
    await message.answer("–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)

@dp.callback_query_handler(text="button_pushed")
async def editlastmsg(call: types.CallbackQuery):
    await call.message.edit_text("324678")
















if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)